//         Modified by Melnmarn on the 20th of January 1995          //
//         Modified by Vashkar on the 23rd of October 1995
//Updated by Circe 1/9/05 extensively to match new code.

***NOTE:  This file will help you build a monster that inherits MONSTER (these are the monsters that wield weapons).  If you want a monster with natural weapons like claws, bite, etc, read <help weaponless_tutorial>

You may find examples of monsters already built in /d/common/mons/

What must be done in each and every monster!

#include <std.h>
	This will give you access to our most commonly defined shortcuts

inherit MONSTER;

void create(){
   ::create();
	Always call the super ::create() first to make sure the 
	mob loads without any problems.   the only thing that 
	should go above it are any defined variables (object obj, etc)

set_name("beggar");  
	Please set_name on all mobs.  Names are used by the mud for 
	many different things.  The name you give a mob will be what 
	shows up on a player's kills list.

set_id(({"beggar","poor beggar","a poor beggar","a beggar"}));
	These are the things a player must type to make reference 
	to the monster, as in <look poor beggar>.
	You can have any number of id's inside the ({ }), but make 
	sure you separate them by , and enclose them in "".  
	For advanced information, this is an example of an array.

set_short("a poor beggar");
	This sets the desc you see when you enter a room with 
	the monster in it.

set_long("He is a poor pathetic beggar looking for a few coins.");
	This sets the decription you see when you look at the monster.

set_race("human" ); 
	This makes the monster a member of a certain race.  This 
	MUST be set.  This is used to return the message "You look 
	over the male human." to a player among other things.  
	NOTE:  A list of races may be found by typing <races> and
	<mraces>.  You may use a race not on this list, but you 
	MUST then set a valid body_type from the races or mraces
	list.  To see the limbs available a certain race, which 
	can help you decide which body to use, type <races racename>
	or <mraces racename>.  If you use a valid race that is 
	already defined, you do not have to set_body_type() or 
	set_wielding_limbs()

set_gender("male"); 
	Acceptable strings are "male", "female", "neuter".  Make sure
	you set this, as a neuter knight is a silly thing.

set_body_type("human");
	Let's start from the back up.  In the Shadowgate combat system, 
	you must create a body for a monster.  You do this by adding limbs.
	set_body_type() automatically adds the limbs used by the player 
	race you pass, or by the monster body type you pass as an arg.  

set_hd(4,1);
	This sets the number of dice to roll for hit points as well 
	as any pluses to their hit-dice.  For example, for an 11th level 
	monster with a plus 2 to their hit-dice.  set_hd(11,2) would do it. 
	NOTE: hd are very important when dealing with undead because 
	of the cleric turn ability.  They are also used for saving 
	throws, so make sure you always set them even if you 
	manually set hp.

set_overall_ac(4);
	This sets the ac of all limbs to 4, except the torso which it 
	sets a bit higher than the number.  Note that a level 4 
	beggar would NEVER have an AC of anything other than 10.

set_size(2);
	This sets the size of the creature. 
	There are 3 basic sizes:
	1 ---- Smaller than man (IE: rats, dogs, etc.)
	2 ---- Man-sized (obvious, isn't it)
	3 ---- Giant (much larger than man.)
	This is not necessary if you use a set_race() defined in 
	<races> or <mraces>.

set_max_level(10);
	This will set the maximum level a player can be to get full
	experience for killing the mob.  This will help keep things 
	in balance.  Set it based on the difficulty of your mob and 
	the intended level of your area.

These are all of the functions minimally necessary to create a monster.
However, they will be dull monsters set up for hack and slash.  Below is a
listing of optional functions you may put in code to individualize your monster.
******************************************************************************

set_wielding_limbs(({"right hand","left hand"}));
	Sets the limbs in which a monster is able to wield a weapon.
	This is not necessary if you use a valid, defined race.


set_max_hp(100);
	Sets the maximum number of hit points a monster may have. 
	You would set this if you want to create a monster that is 
	wounded and can heal.  We almost always set this because the
	current set_hd hit points generally are not enough for a mob
	with the amount of damage our players can do.

set_hp(50);
	Sets how many hp the monster has.  The function will not 
	allow you to set it below a certain number depending on 
	the level of the monster.  If you want to set a random 
	number for max hp, but still have the monster fully healed, 
	you can do it this way:
		set_max_hp(random(50)+100);
		set_hp(query_max_hp());

set_exp(1000);
	Sets how many experience points the monster has, and
	therefore is worth to the player.  This will allow you 
	to adjust the number of experience points in your area.
	NOTE:  Each mob/area should be good for only ONE of the
	following: exp, gear, or money.  Please make sure you 
	lower the exp if the gear in your area is especially good.

set_stats("strength",15);
	Sets a monster stat value.  Please make sure you clone 
	your mob and make sure his stats are okay (<stat monster>).
	Stats are predetermined based on hit dice, so it's very 
	important to set them manually so you do not end up with 
	a strength of 3...or of 25.

set_class("cleric");
	Makes the monster a member of a certain class.  This is 
	especially important if you want the monster to be a 
	caster (though WEAPONLESS might be better for that)

set_mlevel("cleric",10); 
	Sets the monster's level in an individual class.
	Especially helpful for multi-classed monsters.

set_guild_level("cleric",10);
	This set's the monster's "guild" level - a MUST have 
	for casters.  The guild level is queried on casting 
	spells.  

set("aggressive", 10)     *or*     set("aggressive", "special_func");
	If you pass a number, then it will have the monster automatically 
	attack anyone with a charisma lower than that number.  If you 
	pass a string, then it will look for a function by the name of 
	the string passed to call (you write the function and specify 
	what you want to happen when the monster encounters a player).  
	This is useful for making monsters which only attack rogues 
	or elves or whatever.  NOTE: Unless your monster can sense 
	invisible creatures, you will need to put in checks to see 
	if the player is invisible before the mob acts.  Otherwise, 
	it will call the aggressive function no matter if the player
	is invisible or not.

set_wimpy(20);
	Makes the monster wimp out at 20% of its max_hp

set_wimpydir("out");
	Makes "out" the preferred direction of wimping out.  Keep 
	in mind that if you set out and there is no out, it will 
	search for a direction that is there.

set_spell_chance(30);
	Sets the percent chance the monster has during an attack 
	for each round for casting a spell.  Make sure you've set 
	the monster as a caster class and set its guild level.

set_spells(({"magic missile", "hideous laughter"}));
	Sets up a list of possible spells the monster can execute 
	during combat.  Note that game-defined attack spells need 
	no argument during combat.  But other spells, like heal 
	spells, stealing, and immortal defined spells need any 
	appropriate arguments.  Also, some spells require the 
	monster to be a member of a certain class.  And if you 
	want the monster to cast the spell effectively, remember 
	to set that guild level.

set_func_chance(15);
	Sets the percent chance the monster has to attack by 
	running a random function rather than try to hit an 
	enemy normally.

set_funcs(({"scream", "firebreath"}));
	Sets up a list of possible functions the monster can 
	execute during combat.  The monster will randomly call 
	a function within its list, passing a random enemy to 
	the function as an argument.  You can make one function
	more common than another by listing it more times, like
	this: set_funcs(({"scream","scream","scream","firebreath"}));

	You can set up the firebreath function like this (make 
	sure it's outside create!):

	void firebreath(object targ) {
		if(!objectp(targ)) return;
		if(!objectp(TO)) return;
		tell_object(targ,"You're burned by firebreath!");
		tell_room(EETO,""+targ->QCN+" is burned by "+
			"firebreath!",targ);
		targ->do_damage(targ->return_target_limb(),random(25)+5);
		return;
	}

	That will accept a random enemy as a target for the function.  
	The checks above (objectp, etc) help stop bugs with this sort 
	of thing, so please make sure to include them.

set_languages(({"elven","common"}));
	Makes the monster be able to speak each of these languages 
	fluently.  A monster needs to be able to speak a language 
	fluently in order ALWAYS to understand the utterances of 
	another fluent speaker in the same language (for insteance, 
	when you use set_speech() or define catch_tell())

set_lang_prof("nibelungen", 7);
	Useful for making a monster partially adept at a given language.
	(fluency range: 1-10)

set_emotes(20, ({"The beggar grovels a bit.","The beggar whines."}), 0);
	This sends emotes and other messages to the room.  Every heart 
	beat, this beggar will have a 20% chance (the first arg) of 
	sending out randomly one of these messages.  The third argument 
	is either 1 or 0.  1 means the message is for combat, 0 is for 
	peace.

set_achats(20,({"The beggar bleeds on you.\n","The beggar spits on you.\n"}));		
	This is the same as set_emotes(), except that these chats are 
	always given while the monster is engaged in combat.

*******************************************************************************

Functions outside of create() that you define:

void catch_tell(string str) { }

Whenever anything is done in a room, like you give bozo a flower, the function
tell_object is used to tell:
you: You give Bozo a flower.
Bozo: Descartes gives you a flower.
anyone else in the room: Descartes gives Bozo a flower.

The string given by tell_object() to a monster will go to the function
catch_tell if it exists in the monster, so that, if Bozo is a monster, then
str in our catch tell: str = "Descartes gives you a flower."
inside catch_tell, you can do whatever you want with this string, the most
common user is to use a function called sscanf() to search for keywords in
the monster.  I am adding a function to monster.c called interact
usage: interact(str1, str2);
If str1 is in str2, the the function will return 1, if not 0;
So we could test to see if Bozo is getting a sword by the following:
if(interact("gives", str)) {
    if(interact("you", str)) {
	if(interact("sword", str)) {
		if(present("sword")) tell_room(environment(this_object()), "Bozo says: Thank you!\n");
	}
    }
}

You need to check in the case of gives that it was actually a giving, and no
emote was used.  Make sure you do not have the monster respond by teling
a phrase that would in turn cause it to respond again.  You can always
exempt the monster from being told what you are telling the room with the
following syntax:

tell_room(environment(this_object()), string_to_be_told, ({ this_object() }) );

Please see /doc/efun/tell_room, /doc/lfun/catch_tell, /doc/lfun/interact,
/doc/efun/tell_object


			-Descartes of Borg 920928
modified 930822
re-modified by Melnmarn@ShadowGate 950120

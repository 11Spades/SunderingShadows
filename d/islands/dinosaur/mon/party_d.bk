#include <std.h>
#define BASE "/d/islands/dinosaur/rooms/"

inherit DAEMON;
int healer = 0;

void dino_party(object room);
void make_em(object room);
void check_healer();

void clean_up() { return 0; }


void make_em(object room){
    int i, j;

    switch(random(120)){

      case 0..4:
        i = 1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/tyrano.c")->move(room);
        }
        break;

      case 5..19:
        i = random(2)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/anky.c")->move(room);
        }
        break;

      case 20..29:
        i = random(3)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/tric.c")->move(room);
        }
        break;

      case 30..39:
        i = random(2)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/stego.c")->move(room);
        }
        break;

      case 40..49:
        i = random(3)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/ptera.c")->move(room);
        }
        break;

      case 50..79:
        i = random(3)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/diplo.c")->move(room);
        }
        break;

      case 80..89:
        i = random(4)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/deino.c")->move(room);
        }
        break;

      case 90..100:
        i = random(4) + 1;
        for(j=0;j<i;j++){
          if(random(2)) new("/d/islands/dinosaur/mon/mong.c")->move(room);
            else new("/d/islands/dinosaur/mon/mong2.c")->move(room);
          }
          break;

      default:
        i = random(4)+1;
        for(j=0;j<i;j++){
          new("/d/islands/dinosaur/mon/lambeo.c")->move(room);
        }
        break;
    }
}

void dino_party(object room){
    string *rmlist;

    make_em(room);
    check_healer();
    if(!random(4)){
      rmlist = get_dir(BASE);
      make_em(find_object_or_load(BASE + rmlist[random(sizeof(rmlist))]));
    }
}

void dead_healer(){
    healer = 0;
}

void check_healer(){
    string room;
    string *rmlist;
    object ob, ob2;

    rmlist = get_dir(BASE);
    room = BASE + rmlist[random(sizeof(rmlist))];
    ob = find_object_or_load(room);
    if(!healer){
      healer = 1;
      new("/d/islands/dinosaur/obj/tent.c")->move(ob);
      find_object_or_load("/d/islands/dinosaur/healer.c")->remove_exit("out");
      find_object_or_load("/d/islands/dinosaur/healer.c")->add_exit(room, "out");
      new("/d/islands/dinosaur/mon/tent_guard.c")->move(ob);
    }
}

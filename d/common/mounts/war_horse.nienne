#include <std.h>

inherit "/std/riding_animal.c";  
//last change was 2/25/01
//changing per Garrett to use the common file to fix bugs *Styx* 10/18/03
//inherit "/d/common/mounts/war_horse.c";

// added is_warhorse() so the handle function can distinguish them as special *Styx* 10/05

private static int healingStuff;

int is_warhorse() { return 1; }

void create(){
    ::create();
// should be coming from the inherit now
    set_id(({"war horse","horse","warhorse"}));
    set_name("war horse");
    set_short("war horse");
    set_long("This is a powerfully built, well trained war horse.  Obviously this belongs to someone very well trained and it would be dangerous for anyone lesser to try and ride it.");
    set_level(10);
    set_value(1000);
    set_race("horse");
    set_gender("male");
    set_body_type("equine");
    set_size(3);
    set_max_hp(100);
    set_hd(10,2);
    set_hp(100);
    set_overall_ac(6);
    set_exp(1);
    set_max_distance(20);
    set_enter_room("rides in");
    set_exit_room("leaves riding a war horse.");
    set_vehicle_short("War horse");
    set_attack_limbs(({"right forehoof","left forehoof"}));
    set_attacks_num(2);
    set_damage(2,6);
    healingStuff = 1;
    set_stats("strength",18);
}

// Change from skipping the other checks until the end to making these checks a special function to try again to fix bugs *Styx*  12/11/04

int restrict_mount_ok(object who) {
    int lev, temp, hurt;
// ok, I think this needs to be checked first
    if (!who->is_class("paladin") && !who->is_class("antipaladin") && !who->is_class("ranger") && !who->is_class("druid") && !who->is_class("cavalier")) {
       notify_fail("The war horse will not allow you to mount it!\n");
       return 0;
    }
    lev = who->query_level();

    if (who->is_class("paladin") || who->is_class("cavalier") || who->is_class("antipaladin")) {
        temp = query_hp();
	hurt = query_max_hp() - temp;
        set_level(lev);  // this wasn't working for some reason so using mlevel
        set_mlevel(TO->query_class(),lev);
        set_max_hp(8*lev); 
//	  trying this to fix them going hurt on mounting, probably from the roll on hps changing *Styx*  12/5/04
        set_hp(query_max_hp() - hurt);
        set_damage(1,lev/2);
        if (lev>100 )
            set_max_hp(100*lev);
        set_stats("strength",20);
        if (healingStuff || query_max_hp() < query_hp()) {
            set_hp(query_max_hp());
            healingStuff = 0;
        }
        return 1;
    }  // else (for rangers & druids)
    set_hd(10,2);
    set_level(10);
    set_stats("strength",18);
    set_max_hp(100);
    if (healingStuff || query_max_hp() < query_hp()) {
       set_hp(query_max_hp());
       healingStuff = 0;
    }
    set_damage(2,6);
    return 1;
}

/* overloading functions that bypass the super cause problems unless you can call the super first  *Styx*
int enter(string str){
    int lev, temp, hurt;
    lev = TP->query_level();

    if (TP->is_class("paladin") || TP->is_class("cavalier") || TP->is_class("antipaladin")) {
        temp = query_hp();
        set_level(lev);
//        set_hp(8*lev); not sure why this was changed from what I had
//	  trying this to fix them going hurt on mounting, probably from the roll on hps changing *Styx*  12/5/04
	hurt = query_max_hp() - temp;
        set_hp(query_max_hp() - hurt);
        set_damage(1,lev/2);
        if (lev>100 )
            set_max_hp(100*lev);
        set_stats("strength",20);
        if (healingStuff || query_max_hp() < query_hp()) {
            set_hp(query_max_hp());
            healingStuff = 0;
        }
    } else {
        set_hd(10,2);
        set_level(10);
        set_stats("strength",18);
        set_max_hp(100);
        if (healingStuff || query_max_hp() < query_hp()) {
            set_hp(query_max_hp());
            healingStuff = 0;
        }
        set_damage(2,6);
    }
    if (!TP->is_class("paladin") && !TP->is_class("antipaladin") &&!TP->is_class("ranger") && !TP->is_class("druid") && !TP->is_class("cavalier"))
        return notify_fail("The horse will not let you mount it!\n");
    else
        return ::enter(str);
    return 1;
}
*/

void set_level(int x){
    ::set_level(x);
    set_riding_level(x);
}


#include <std.h>
#include <move.h>
#include "../../tecqumin.h"

inherit ROOM;

mapping __PosDir;
mapping __Colours;

int demon_pos, demon_dir;

void enter_east(object ob);
void enter_west(object ob);
void show(string * what);
string * get_picture(object ob, int dir, object looker);
void show_bridge(object looker);
void setup_Colours();
string crit_colour(int i);

void create() {
  ::create();
  set_exits(([
      "east" : JUNGLE + ""
   ]));
  __PosDir = ([]);
  setup_Colours();
}

void setup_Colours(){
  __Colours = ([
     0:([]),1:([]),2:([]),3:([]),4:([]),
     5:([]),6:([]),7:([]),8:([]),9:([]),
     10:([]),11:([]),12:([]),13:([]),14:([])
     ]);
}

void init(){
  ::init();
  add_action("cross_over","cross");
  add_action("check_bridge", "check");
}

check_bridge(string str){
  if (str != "bridge" && str !="rope bridge" && str != "ropebridge"
         && str != "progress" && str != "progress across bridge"){
    return notify_fail("Try <check progress>");
  }
  show_bridge();
  return 1;
}

void set_PosDir(object ob, int * PosDir){
  object * obs;
  obs = keys(__PosDir);
  if (member_array(ob, obs)!=-1){
    map_delete(__PosDir, ob); 
  }
  __PosDir += ([ob : PosDir]);
}

void set_pos(object ob, int pos){
  object * obs;
  int dir;
  dir = 0;
  obs = keys (__PosDir);
  if (member_array(ob, obs)!=-1){
    dir = __PosDir[ob][1];
    map_delete(__PosDir, ob); 
  }
  __PosDir += ([ob : ({pos, dir})]); 
}
int query_pos(object ob){
  return __PosDir[ob][0];
}

void set_dir(object ob, int dir){
  object * obs;
  int pos;
  pos = 0;
  obs = keys (__PosDir);
  if (member_array(ob, obs)!=-1){
    pos = __PosDir[ob][0];
    map_delete(__PosDir, ob); 
  }
  __PosDir += ([ob : ({pos, dir})]); 
}

void set_demon_pos(int pos){
  demon_pos = pos;
}

int query_demon_pos(){
  return demon_pos;
}

int set_demon_dir(int dir){
  demon_dir = dir;
}

int query_demon_dir(){
  return demon_dir;
}

void show_demon(){
  show(({"Daemon", "(\//)", "|..|", " VV--<", " ||", " LL"}));
}

void show(string * what){
  int i, rows;
  rows = sizeof(what);
  for (i=0;i<rows;i++){
    tell_room(TO, what[i]);
  }  
}

string query_colour(int row, int pos){
  if (member_array(row, keys(__Colours))==-1){
    return "";
  }
  if (member_array(pos, keys(__Colours[row]))==-1){
    return "";
  }
  return __Colours[row][pos];
}

int add_colour(int row, int pos, string col){
  string colour;
  mapping temp_map;
  if (member_array(row, keys(__Colours)) == -1){
    return -1;
  }
  colour = "";
  if (member_array(pos, keys(__Colours[row]))!=-1){
    colour = __Colours[row][pos];
  }
  colour += col;
  __Colours[row][pos] = colour;
  return 1;
}

int compare(int one, int two){
  return one - two;
}

string * colour_bridge(string * bridge){
  int i,j, *positions;
  for(j=0;j<sizeof(bridge);j++){
  switch(j){
  case 0..2: 
    add_colour(j,0, "%^B_CYAN%^");
    break;
  case 3:
    add_colour(j,43, "%^B_GREEN%^");
    add_colour(j,33, "%^B_CYAN%^");
    add_colour(j,0, "%^B_GREEN%^");
    break;
  case 4:
    add_colour(j, 42, "%^B_GREEN%^");
    add_colour(j, 33, "%^B_CYAN%^");
    add_colour(j, 31, "%^B_ORANGE%^");
    add_colour(j, 29, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 5:
    add_colour(j, 43, "%^B_GREEN%^");
    add_colour(j, 42, "%^B_WHITE%^");
    add_colour(j, 41, "%^B_GREEN%^");
    add_colour(j, 38, "%^B_BLUE%^");
    add_colour(j, 32, "%^B_GREEN%^");
    add_colour(j, 29, "%^B_ORANGE%^");
    add_colour(j, 25, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 6:
    add_colour(j, 44, "%^B_GREEN%^");
    add_colour(j, 43, "%^B_WHITE%^");
    add_colour(j, 41, "%^B_ORANGE%^");
    add_colour(j, 39, "%^B_GREEN%^");
    add_colour(j, 36, "%^B_BLUE%^");
    add_colour(j, 30, "%^B_GREEN%^");
    add_colour(j, 25, "%^B_ORANGE%^");
    add_colour(j, 22, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 7:
    add_colour(j, 45, "%^B_GREEN%^");
    add_colour(j, 44, "%^B_WHITE%^");
    add_colour(j, 43, "%^B_ORANGE%^");
    add_colour(j, 40, "%^B_GREEN%^");
    add_colour(j, 37, "%^B_BLUE%^");
    add_colour(j, 31, "%^B_GREEN%^");
    add_colour(j, 24, "%^B_ORANGE%^");
    add_colour(j, 21, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 8:
    add_colour(j, 46, "%^B_GREEN%^");
    add_colour(j, 45, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 39, "%^B_GREEN%^");
    add_colour(j, 36, "%^B_BLUE%^");
    add_colour(j, 29, "%^B_GREEN%^");
    add_colour(j, 21, "%^B_ORANGE%^");
    add_colour(j, 19, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 9:
    add_colour(j, 48, "%^B_GREEN%^");
    add_colour(j, 46, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 39, "%^B_GREEN%^");
    add_colour(j, 34, "%^B_BLUE%^");
    add_colour(j, 27, "%^B_GREEN%^");
    add_colour(j, 19, "%^B_ORANGE%^");
    add_colour(j, 17, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 10:
    add_colour(j, 51, "%^B_GREEN%^");
    add_colour(j, 48, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 39, "%^B_GREEN%^");
    add_colour(j, 32, "%^B_BLUE%^");
    add_colour(j, 25, "%^B_GREEN%^");
    add_colour(j, 18, "%^B_ORANGE%^");
    add_colour(j, 17, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 11:
    add_colour(j, 54, "%^B_GREEN%^");
    add_colour(j, 50, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 39, "%^B_GREEN%^");
    add_colour(j, 30, "%^B_BLUE%^");
    add_colour(j, 24, "%^B_GREEN%^");
    add_colour(j, 18, "%^B_ORANGE%^");
    add_colour(j, 16, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 12:
    add_colour(j, 56, "%^B_GREEN%^");
    add_colour(j, 53, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 40, "%^B_GREEN%^");
    add_colour(j, 29, "%^B_BLUE%^");
    add_colour(j, 24, "%^B_GREEN%^");
    add_colour(j, 18, "%^B_ORANGE%^");
    add_colour(j, 16, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 13:
    add_colour(j, 58, "%^B_GREEN%^");
    add_colour(j, 55, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 41, "%^B_GREEN%^");
    add_colour(j, 27, "%^B_BLUE%^");
    add_colour(j, 23, "%^B_GREEN%^");
    add_colour(j, 17, "%^B_ORANGE%^");
    add_colour(j, 15, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
  case 14:
    add_colour(j, 60, "%^B_GREEN%^");
    add_colour(j, 56, "%^B_WHITE%^");
    add_colour(j, 44, "%^B_ORANGE%^");
    add_colour(j, 41, "%^B_GREEN%^");
    add_colour(j, 26, "%^B_BLUE%^");
    add_colour(j, 23, "%^B_GREEN%^");
    add_colour(j, 16, "%^B_ORANGE%^");
    add_colour(j, 14, "%^B_WHITE%^");
    add_colour(j, 0, "%^B_GREEN%^");
    add_colour(j, 0, "%^BOLD%^%^WHITE%^");
    break;
    }
  }
  for (i = 0;i<15;i++){
    positions = keys(__Colours[i]);
    if (sizeof(positions)<1){
      continue;
    }
    positions = sort_array(positions, "compare", TO);
    for (j = sizeof(positions)-1;j>-1;j--){
      bridge[i] ="/daemon/str_insert_d.c"->brute_insert_string(bridge[i],__Colours[i][positions[j]], positions[j]);
    }
  }
  return bridge;
}

void show_bridge(object looker){
  string * bridge, *pic;
  object * critters, *obs, ob;
  int i, j, *posDir, vPos, vHeight;
  setup_Colours();

  bridge = ({
"                                                                     ",
"                                                                     ",
"                                                                     ",
"                                                                     ",
"   ||  ||                                                   ||  ||   ",
"   ||  ||                                                   ||  ||   ",
"___||__||                                                   ||__||___",
"---||--||\\                                                 /||--||---",
"   ||  ||\\\\- - - - - - - - - - - - - - - - - - - - - - - -//||  ||   ",
"   ||  || \\\\_____________________________________________// ||  ||   ",
"   ||  ||  \\---------------------------------------------/  ||  ||   ",
"   ||  ||                                                   ||  ||   ",
"   ||  ||                                                   ||  ||   ",
"   ||  ||                                                   ||  ||   ",
"   ||  ||                                                   ||  ||   "});
  critters = all_living(TO);
  if (sizeof(critters)<1){
    show(bridge);
    return;
  }
  for (i=0;i<sizeof(critters);i++){
    tell_room(TO, " count " + i + ". Checking critter: " +
critters[i]->query_name());
    posDir = ({0,0});
    obs = keys(__PosDir);
    ob = critters[i];
    if (member_array(ob, obs)!=-1){
      posDir = __PosDir[ob];
    }
    pic = get_picture(ob, posDir[1], TP);
    switch (posDir[0]){
    case 0..7:
      vPos = 9;
      break;
    case 8:
      vPos = 10;
      break;
    case 9:
      vPos = 11;
      break;
    case 10:
      vPos = 12;
      break;
    case 11..54:
      vPos = 12;
      break;
    case 55:
      vPos = 11;
      break;
    case 56:
      vPos = 10;
      break;
    default:
      vPos = 9;
      break;
    }
    vPos -= 6;
    vHeight = sizeof(pic);
    for (j=vPos; j<vPos + vHeight;j++){
      bridge[j]="/daemon/str_insert_d.c"->insert_string(
                                   bridge[j],pic[j-vPos],posDir[0]);
      add_colour(j, posDir[0], crit_colour(i));
/*      if (j==vPos + 2){
        add_colour(j, posDir[0] + 1, "%^B_RED%^");
        add_colour(j, posDir[0] + 2, "%^B_RED%^");
        add_colour(j, posDir[0]+strlen(pic[j-vPos]), "%^B_ORANGE%^");
      }*/
      add_colour(j, posDir[0]+strlen(pic[j-vPos]), "%^BOLD%^%^WHITE%^");
    }
  }
  colour_bridge(bridge);
  show(bridge);
}

string crit_colour(int i){
  i = i % 6; 
  switch (i){
  case 0:
    return "%^BOLD%^%^RED%^";
  case 1:
    return "%^BOLD%^%^MAGENTA%^";
  case 2:
    return "%^BOLD%^%^YELLOW%^";
  case 3:
    return "%^BOLD%^%^CYAN%^";
  case 4:
    return "%^BOLD%^%^GREEN%^";
  case 5:
    return "%^BOLD%^%^BLUE%^";
  }
}

string * get_picture(object ob, int dir, object looker){
  object * wielded, wpn;
  string nm;
  if (!objectp (ob)||!interactive(ob)){
    return({});
  }
  wielded = ob->query_wielded();
  nm = ob->query_race();
  if (looker->isKnown(ob->query_name())){
    nm = looker->knownAs(ob->query_name());
  }
  if (sizeof(wielded)>1){
    switch(dir){
    case 0:
      return ({nm, "\\ (..) /", " \\-||-/", "   //"});
    case 1:
      return ({nm, "\\ (..) /", " \\-||-/", "   LL"});
    }
  }
  if (sizeof(wielded)>0){
    wpn = wielded[0];    
    if (objectp(wpn)){
      if (wpn->id("sword")){
        switch (dir){
        case 0:
          return ({nm, "\ (..)", " \-||", "   //"});
        case 1:
           return ({nm, "(..) /", " ||-/", " LL"});
        }
      } 
      if (wpn->id("mace")){
        switch(dir){
        case 0:
          return ({nm, "O (..)", " \-||", "   //"});
        case 1:
          return ({nm, "(..) O", " ||-/", " LL"});
        }
      }
      if (wpn->id("staff")){
        switch (dir){
        case 0:
          return ({nm, "|(..)", "|-||", "' //"}); 
        case 1:
          return ({nm, "(..)|", " ||-|", " LL '"});
        }
      }
      if (wpn->id("spear")){
        switch (dir){
        case 0:
          return ({nm, "\ (..)", " \-||", "  \// "}); 
        case 1:
          return ({nm, "(..) /", " ||-/", " LL/"});
        }
      }
    }
  }
  switch(dir){
  case 0:
    return ({nm, " (..)", " -||", "  //"});
  default:
    return ({nm, "(..)", " ||-", " LL" });
  }
}

//Coded by Lujke
#include <std.h>
#include <daemons.h>
#include <move.h>

#include "../tecqumin.h"
#define DEST "/daemon/destinations_d.c"
#define JAGUAR 0
#define HUMAN 1

inherit MONSTER;

int flag, form, timer, leaving_lair, acting;
object current_room;
void leave_lair();
void lair_actions();
void transform();
void go_bed();
void wake_up();
void grab_run();
void grab_run2();
void enter_lair();

void create()
{
      object ob;
      int i;
      if (sizeof(children(file_name(TO)))>1){
          move("/d/shadowgate/void");
          remove();
      }
      ::create();
  	set_name("stealthy werejaguar");
  	set_id(({"jaguar", "werejaguar", "stealthy werejaguar"}));
  	set_short( "%^BOLD%^%^BLACK%^stealthy %^RESET%^%^ORANGE%^we%^BOLD%^%^BLACK%^re"
        +"%^RESET%^%^BLUE%^%^j%^ORANGE%^a%^BOLD%^%^BLACK%^g%^RESET%^%^ORANGE%^u"
        +"%^MAGENTA%^a%^BOLD%^%^BLACK%^r");
      set_gender("male");
      set_long("%^BOLD%^%^BLACK%^This b%^RESET%^%^ORANGE%^e%^BLUE%^a"
        +"%^BOLD%^%^BLACK%^s%^RESET%^%^MAGENTA%^t %^BOLD%^%^BLACK%^has fur"
        +" patterned in rings and spots like a jaguar, but in dark shades of"
        +" %^RESET%^%^ORANGE%^ochre%^BOLD%^%^BLACK%^, %^RESET%^%^MAGENTA%^deep"
        +" purple%^BOLD%^%^BLACK%^, %^RESET%^%^BLUE%^midnight blue%^BOLD%^%^BLACK%^"
        +" and black. It is half as long as a normal big cat, and perhaps twice the"
        +" bulk. Muscles ripple under its skin as it moves silently through the"
        +" %^GREEN%^j%^BOLD%^%^GREEN%^u%^RESET%^%^GREEN%^ng%^BOLD%^%^GREEN%^l"
        +"%^RESET%^%^GREEN%^e%^BOLD%^%^BLACK%^. Its intelligence seems evident in"
        +" glowing %^RESET%^%^ORANGE%^a%^BOLD%^%^YELLOW%^m%^RESET%^%^ORANGE%^b"
        +"%^BOLD%^%^YELLOW%^e%^RESET%^%^ORANGE%^r%^BOLD%^%^BLACK%^ eyes.");
  	set_race("jaguar");
  	set_body_type("quadruped");
  	set_hd(35,12);
  	set_size(3);
  	set("aggressive",25);
	set_class("thief");
	set_mlevel("thief",33);
	set_level(33);
	set_guild_level("thief",33);
      set_thief_skill("climb walls", 95);
   	set_hp(random(35)+200);
   	set_exp(20000);
	set_max_level(35);
	set_property("swarm",1);
  	set_overall_ac(-29);
  	set_alignment(4);
      set_property("full attacks",1);
      set_thief_skill("climb walls", 150);
      form = JAGUAR;
    //NO CLEAN STUFF
    set_no_clean(1);
    leaving_lair = 0;
    acting = 0;
    timer = 7200; //(2 hours) 
}

void transform(){
  switch(form){
  case JAGUAR:
    set_short("");
    set_long("");
    set_id(({"human", "werejaguar", "sneaky werejaguar"}));
    set_race("human");
    set_body_type("humanoid");
    set_class("fighter");
    set_mlevel("fighter",33);
    set_level(33);
    set_guild_level("fighter",33);
    form = HUMAN;
    break;
  case HUMAN:
    set_long("");
    set_race("jaguar");
    set_id(({"jaguar", "werejaguar", "sneaky werejaguar"}));
    set_short( "%^BOLD%^%^BLACK%^sneaky %^YELLOW%^we%^BOLD%^%^BLACK%^re%^YELLOW%^j%^RESET%^"
        +"%^ORANGE%^a%^BOLD%^%^BLACK%^g%^RESET%^%^ORANGE%^u%^YELLOW%^a%^RESET%^%^ORANGE%^r");
    set_class("thief");
    set_mlevel("thief",33);
    set_level(33);
    set_guild_level("thief",33);
    form = JAGUAR;
    break;
  }
}

void grab_run2(){
  string roomname;
  roomname = file_name(ETO);
  acting = 0;
  if (roomname != CITY_ROOM + "grand_interior02"){
    if (roomname == CITY_ROOM + "city_jung14"){
      reach_destination();
      return;
    }
    if (roomname[0..sizeof(CITY_ROOM)-1]==CITY_ROOM){
      start_walking(CITY_ROOM + "city_jung14");
      return;
    }
  }
  force_me("out");
  force_me("north");
  force_me("north");
  force_me("west");
  force_me("northwest");
  reach_destination();
}

void grab_run(){
  force_me("emote grabs something from one of the shelves");
  force_me("emote darts out of the hut and makes a run for it!");
  grab_run2();
  acting = 1;
}

void lair_actions(){
  object * killers, room;
  force_me("pose clear");
  room = find_object_or_load(JUNG_ROOM + "jaguar_lair");
  if (objectp(room)&& room !=ETO){
    return;
  }
  if (form == JAGUAR) {
    leave_lair();
  }
  killers = query_attackers();
  if (sizeof(killers)>0){
    return;
  }
  if (form == JAGUAR){
    call_out("leave_lair", 3);
    acting = 1;
  }
  switch(random(12)){
  case 0..2:
    force_me("emote pads over to the little bed of leaves");
    call_out("go_bed", 3);
    acting = 1;
    return;
    break;
  case 3..5:
    force_me("emote rummages around in the bed of leaves");
    break;
  case 6..8: 
    force_me("emote picks up a knife from the table and starts"
              +" tossing it from hand to hand");
  case 9..11:
    force_me("emote rearranges some flowers in the vase");  
    break;
  case 12:
    transform();
  }
}

void go_bed(){
  object room;
  room = find_object_or_load(JUNG_ROOM + "jaguar_lair");
  if (!objectp(room)||room !=ETO){
    return;
  }
  force_me("emote crawls into the little bed and curls up");
  force_me("pose sleeping in a little bed");
  acting  = 0;
}

void wake_up(){
  object room;
  room = find_object_or_load(JUNG_ROOM + "jaguar_lair");
  if (!objectp(room)||room !=ETO){
    return;
  }
  force_me("emote wakes up");
  force_me("pose clear");
  acting = 0;
}

void leave_lair(){
  object room;
  room = find_object_or_load(TECSTORE);
  if (file_name(ETO) != JUNG_ROOM + "jaguar_lair"){
    return;
  }
  force_me("out");
  leaving_lair = 1;
  acting = 0;
}

void reach_destination(){
  string * dests, dest, rpath;
  int i, fl, mazetime, waytime;
  object room, luj;
  luj = find_player("lujke");
  //choose new destination:
  switch (file_name(ETO)){
  case CITY_ROOM + "city_jung14":
    dests = ({CITY_ROOM + "grand_interior02", JUNG_ROOM + "j_link3a", 
       JUNG_ROOM4 + "j_maze30", JUNG_ROOM4 + "j_maze70",
       JUNG_ROOM + "jag_lair_entry", JUNG_ROOM + "j_link4"});
    leaving_lair = 0;
    break;
  case JUNG_ROOM + "jag_lair_entry":
    switch(leaving_lair){
    case 0:
      enter_lair();
      return;
      break;
    case 1:
    dests = ({CITY_ROOM + "city_jung14", JUNG_ROOM + "j_link3a", 
       JUNG_ROOM4 + "j_maze30", JUNG_ROOM4 + "j_maze70",
       JUNG_ROOM + "j_link4"});      
    break;
    }
  case JUNG_ROOM + "j_link3a":
    dests = ({CITY_ROOM + "city_jung14", 
       JUNG_ROOM4 + "j_maze30", JUNG_ROOM4 + "j_maze70",
       JUNG_ROOM + "jag_lair_entry", JUNG_ROOM + "j_link4"});
    leaving_lair = 0;
    break;
  case JUNG_ROOM + "j_link4":
    dests = ({ JUNG_ROOM + "j_link3a", 
       JUNG_ROOM4 + "j_maze30", JUNG_ROOM4 + "j_maze70",
       JUNG_ROOM + "jag_lair_entry", JUNG_ROOM + "j_link4"});
    leaving_lair = 0;
    break;
  case CITY_ROOM + "grand_interior02":
    call_out("grab_run", 3);
    leaving_lair = 0;
    return;
    break;
  default:
    dests = ({CITY_ROOM + "city_jung14", JUNG_ROOM + "j_link3a",
       JUNG_ROOM4 + "j_maze30", JUNG_ROOM4 + "j_maze70",
       JUNG_ROOM + "jag_lair_entry", JUNG_ROOM + "j_link4"});    
    leaving_lair = 0;
  }  
  i = random(sizeof(dests));
  dest = dests[i];
  room = find_object_or_load(dest);
  while (room == ETO){
    i ++;
    if (i>=sizeof(dests)){
      i=0;
    }
    dest = dests[i];
    room = find_object_or_load(dest);
  }
  waytime = DEST->query_timing(dest);
  mazetime = "/daemon/maze_d.c"->query_timing(JUNG_ROOM4 + "j_maze");
  if (mazetime > waytime){
  // Above check makes sure the next lag inducing maneuvre only happens
  // if the maze has been reset since the waystations were set up    
    DEST->clear_waystations(dest);
    DEST->generate_waystations(dest,6, 4);
  }
  force_me("say going to " + room->query_short());
  force_me("say " + dest);
  if (objectp(luj)){
    tell_object(luj, "Destination: " + dest);
  }
  set_property("sneaking", 1);
  start_walking(dest);
  fl = 0;
}

void heart_beat(){
    object luj, store;
    int entry;
    string roomname;
    ::heart_beat();
    luj = find_player("lujke");
    if(!objectp(TO)) return;
    if(!objectp(ETO)) return;    
    if(current_room != ETO)
    {
        if(objectp(current_room) && flag) current_room->set_no_clean(0);
        current_room = ETO;
        if(!current_room->query_no_clean()) 
        {
            flag = 1;
            current_room->set_no_clean(1);
        }
        else flag = 0;
    }
    timer--;
    if(sizeof(TO->query_attackers())<1)
    {
        if (query_property("posed") == "sleeping in a little bed"){
            wake_up();
        }
        timer = 7200;
        if(!query_no_clean()) set_no_clean(1);
    }
    else if(timer < 0) { set_no_clean(0); }
    if (timer %3 ==0){ //start him walking if he's idle
      roomname = file_name(ETO);             // and not in his lair
      if (objectp(luj)){
        tell_object(luj, "Not walking; testing other options at " + roomname);
      }
      store = find_object_or_load(TECSTORE);
      if (objectp(store)){
        entry = store->query_jag_entry();
      }
      switch (roomname){
      case JUNG_ROOM + "jag_lair_ground":
        switch (leaving_lair){
        case 0:
          if (objectp(luj)){
            tell_object(luj, "Trying to enter lair");
          }
          switch(entry){
          case CLIMB:
            force_me("climb tree");
            break;
          case SCRAMBLE:
            force_me("scramble under fern");
            break;
          case SQUEEZE:
            force_me("squeeze through thicket");
            break;
          }
          break;
        case 1:
          tell_object(luj, "Trying to leave from ground");
          switch(entry){
          case CLIMB:
            force_me("up");
            break;
          case SCRAMBLE:
            force_me("scramble under fern");
            break;
          case SQUEEZE:
            force_me("squeeze through thicket");
            break;
          }
          break;
        }
        break;
      case JUNG_ROOM + "jag_lair_outside":
        switch (leaving_lair){
        case 0:
          tell_object(luj, "Trying to enter lair");
          force_me("enter");
          break;
        case 1:
          switch(entry){
          case CLIMB:
            force_me("leap across");
            break;
          case SCRAMBLE:
          case SQUEEZE:
            force_me("down");
            break;
          }
          break;
        }
        break;
      case JUNG_ROOM + "jag_tree1":
        switch (leaving_lair){
        case 0:
          tell_object(luj, "Trying to crawl along branch");
          force_me("crawl along branch");
          break;
        case 1:
          tell_object(luj, "Trying to climb down");
          force_me("climb down");
          break;
        }
      case JUNG_ROOM + "jag_tree2":
        switch (leaving_lair){
        case 0:
          force_me("jump across");
          break;
        case 1:
          force_me("crawl along branch");
          break;
        }
        break;
      case JUNG_ROOM + "jag_lair_entry":
        switch (leaving_lair){
        case 0:
          switch(entry){
          case CLIMB:
            force_me("climb tree");
            break;
          case SCRAMBLE:
            force_me("scramble under fern");
            break;
          case SQUEEZE:
            force_me("squeeze through thicket");
            break;
          }
          break;
        case 1:
          reach_destination();
          break;
        }
        break;
      case JUNG_ROOM + "jaguar_lair":
        switch(leaving_lair){
        case 0:
          if (query_property("posed")== "sleeping in a little bed"){
            if (!random(7)){
              wake_up();
              return;
            } else {
              if (!random(3)){
                force_me("emote snores lightly");
              }
              return;
            }
          }
          if (acting ==0){
            lair_actions();
          }
          break;
        case 1:
          if (acting==0){
            leave_lair();
          }
          break;
        }
        break;
      default:
        if( query_walking()<1){ 
          reach_destination();
        }
        break;
      }
    }
    return;    
}

int query_leaving(){
  return leaving_lair;
}

int query_acting(){
  return acting;
}

void die(object ob)
{
    if(objectp(current_room) && flag) current_room->set_no_clean(0);
    return ::die(ob);
}

















/* void enter_lair(){
  object * killers, room;
  int entry;
  force_me("pose clear");
  room = find_object_or_load(JUNG_ROOM + "jag_lair_entry");
  acting = 1;
  if (file_name(ETO)!= JUNG_ROOM + "jag_lair_entry"){
    call_out("enter_lair_restart", 3);
    return;
  }
  killers = query_attackers();
  if (sizeof(killers)>0){
    call_out("enter_lair", 10 + random (10));
    return;
  }
  room = find_object_or_load(TECSTORE);
  if (objectp(room)){
    entry = room->query_jag_entry();
  }
  switch(entry){
  case CLIMB:
    force_me("climb tree");
    call_out("enter_lair2", 2);
    break;
  case SCRAMBLE:
    force_me("scramble under fern");
    call_out("enter_lair4",2);
    break;
  case SQUEEZE:
    force_me("squeeze through thicket");
    call_out("enter_lair4",2);
    break;
  }
}

void enter_lair2(){
  if (file_name(ETO) == JUNG_ROOM + "jag_tree1"){
    force_me("crawl along branch");
    call_out("enter_lair3", 3);
    return;
  }
  call_out("enter_lair_restart", 2);
}

void enter_lair3(){
  if (file_name(ETO)!= JUNG_ROOM + "jag_tree2"){
    call_out("enter_lair_restart", 1);
    return;
  }
  force_me("leap across");
  call_out("enter_lair5", 2);  
}

void enter_lair4(){
  if (file_name(ETO)!= JUNG_ROOM + "jag_lair_ground"){
    call_out("enter_lair_restart", 1);
    return;
  }  
  force_me("up");
  call_out("enter_lair5",2);
}

void enter_lair5(){
  if (file_name(ETO)!= JUNG_ROOM + "jag_lair_outside"){
    call_out("enter_lair_restart", 1);
    return;
  }
  force_me("enter");
  call_out("arrive_lair", 2);
  acting = 0;
} 

void arrive_lair(){
  if (file_name(ETO) == JUNG_ROOM + "jaguar_lair"){
    force_me("emote sniffs around the corners of the little treehouse");
    call_out("lair_actions", 3);
  } else {
    call_out("enter_lair_restart", 3);
  }
}

 void enter_lair_restart(){
  switch(file_name(ETO)){
    case JUNG_ROOM + "jag_lair_entry":
      enter_lair();
      break;
    case JUNG_ROOM + "jag_lair_ground":
      enter_lair4();
      break;
    case JUNG_ROOM + "jag_lair_outside":
      enter_lair5();
      break;
    case JUNG_ROOM + "jag_tree1":
      enter_lair2();
      break;
    case JUNG_ROOM + "jag_tree2":
      enter_lair3();
      break;
    case JUNG_ROOM + "jaguar_lair":
      arrive_lair();
      break;
    default:
      reach_destination();
      break;
  }
} */

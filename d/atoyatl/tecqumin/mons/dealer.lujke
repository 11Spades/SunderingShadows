//empress.c - The Tecqumin Empress                                 
// Coded by Lujke 29/12/06
#include <std.h>
#include "../tecqumin.h"
#define DECK "/d/shadow/obj/misc/deckofcards"
inherit MOB + "QNPC.c";

void set_responses();

object * players;
mapping hands;
mapping bets;
string deck_id;

int query_card_value(string card);
string query_card_suit(string card);

void create(){
   object deck;
   ::create();
   players = ({});
   hands = ([]);
   set_name("Dealer");
   set_id( ({"dealer","card dealer"}) );
   set_short("A card dealer");
   set_long("A dealer of cards");
   set_gender("male");
   set_race("human");
   set_body_type("human");
   set_hd(20,5);
   set_alignment(5);
   set_max_hp(200);
   set_hp(query_max_hp());
   set_overall_ac(-10);
   set_class("fighter");
   set_mlevel("fighter",25);
   set_level(25);
   set_stats("wisdom",13);
   set_stats("strength",12);
   set_stats("constitution",10);
   set_stats("intelligence",15);
   set_stats("charisma",17);
   set_stats("dexterity",17);
   set_exp(60);
   set("aggressive",0);
   set_responses();
   deck = new(DECK);
   deck->move(TO);
   deck_id = deck->query_id();
}

set_responses(){
  set_response(({"hello", "greetings", "good day", "gooday"}), 
           ({"Hello there.", }) );
}

void start_game(){
  if (sizeof(hands)>0){
    force_me("say There's a game already getting ready to go. Any folks"
            +" that want in jest ask me to deal you in.");
  }
  force_me("say Alright, let's get this game unnerway. Any folks that want"
          +" to play, jest ask me to deal you in.");
}

int add_player(object player){
  if (!objectp(player)){return 0;}
  if (player->query_invis()){
    force_me(" say Ahh, no way fella. I ain't having no-one I can't see"
            +" sitting in on my game");
    return 0;
  }
  hands += ([player->QCN : ({}) ]);
  force_me("say alright, " + player->QCN + ". Draw up a seat and let's get"
          +" on with the game.");
  return 1;
}

void catch_tell(string str){
  string name;
  object dropper, card;
  if (!objectp(ETO)){return;}
  if (interact("drops A card.", str)){
    force_me("get card");
    card = present("card", TO);
    force_me("return card");
    if (sscanf(str, "%s drops A card.", name)==1){
      dropper = present(name, ETO);
      if (objectp(dropper)){
        force_me("emoteat dropper glares at $N");
        force_me("say We're trying to have a card game here, don't be"
                +" making a mess!");
      }
    }
  }
}

void clear_decks(){
  
}
void put_deck_away(){
  object deck;
  deck = present(DECK, TO);
  if (objectp(deck)){
    force_me("emote puts away a spare deck of cards");
    deck->remove();
  }
}

void get_fresh_deck(){
  object deck;
  deck = present(DECK, TO);
  if (objectp(deck)){
    put_deck_away();
    get_fresh_deck();
    return;
  }
  deck =  new(DECK);
  deck->move(TO);
  deck_id = deck->query_id();
}




int deal(){
  int i, j, k;
  string players, player;
  object absentee, deck;
  mapping newhands;
  if (!objectp(ETO)){return 0;}
  deck = present("deck", TO);
  if (!objectp(deck)){
    get_fresh_deck();
  }
  if(deck->query_num_cards()<52){
    get_fresh_deck();
  }
  if ((string)deck->query_id() != deck_id){
    force_me("emote puts a spare deck of cards away");
    deck->remove();
    return deal();

  }
  players = keys(hands);
  for (i=0;i<2;i++){
    for(j=0;j<sizeof(hands);j++){
      player = players[j];
      if (!present(player, ETO)){
        absentee = find_player(player);
        if (objectp(absentee)){
          force_me("say Looks like " + absentee->QCN + " has wandered off."
                  +" Guess I'll just deal " + absentee->QO + " out."
                  +" Everyone put down your cards and let me know when to" 
                  +" start again");

        } else{
          force_me("say hmm, seems like someone's wandered off. I guess"
                  +" I'll just deal them out, but we'll need to start over."
                  +" Everyone put your cards on the table and I'll break"
                  +" out a fresh deck.");
        }
        newhands = ([]);
        for (k=0;k<sizeof(players);k++){
          if (present(players[k], ETO)){
            newhands += ([ players[k]: ({}) ]);   
          }
        }
        hands = newhands;
        return -1;
      }
      force_me ("deal to " + player);
    }
  }
  for (i=0;i<6;i++){
    force_me("deal to dealer");
  }
  return 1;
}

string query_lowest_card(string * hand){
  int i, val;
  string lowcard;
  if (sizeof(hand)<1){return "bleh, no cards in that hand";}
  val = 16;
  for (i=0;i<sizeof(hand);i++){
    if (query_card_value(hand[i])<val){
      lowcard = hand[i];
      val = query_card_value(lowcard);
    }
  }
  return lowcard;
}


int check_straight(string * hand){
  string * straight, * temphand, card;
  int i, val1, val2;
  straight = ({});
  temphand = allocate(5);
  for (i=0;i<5;i++){
    temphand[i] = hand[i];
  }
  for (i=0;i<5;i++){
     card = query_lowest_card(temphand);
    straight += ({card});
    temphand = temphand - ({card});
    if (i==0){
      continue;
    }
    val1=query_card_value(straight[i]); 
    val2 = query_card_value(straight[i-1]);
    if (val1-1 != val2 && 
      !(val1== 14 && val2 != 14 && query_card_value(straight[0])==2)) {
      return -1;
    } 
  }
  return 1;
}

int query_high_card(string * hand, int num){//num=1st,2nd,3rd highest, etc)
  int * highs, i, j, value;
  highs = allocate(5);
  highs[0] = query_card_value(hand[0]);
  for (i=1;i<5;i++){
    value = query_card_value(hand[i]);
    for (j=i;j>0;j--){
      if (value < highs[j-1]){
        highs[j] = highs[j-1];
        highs[j-1] = value;
      } else{ 
        highs[j] = value;
        break;
      }
    }
  }    
  return highs[5 - num];
}

mapping how_many_of_a_kind(string * hand){
  int i, value, * vals, count;
  mapping map;
  count = 0;
  map = ([]);
  value = query_card_value(hand[0]);
  map[value] = 1;
  for (i=1;i<5;i++){
    value = query_card_value(hand[i]);
    vals = keys(map);
    if (sizeof(vals)>0 && member_array(value, vals)!= -1){
      map[value] = map[value]+1;
    }else{
      map += ([value:1]);
    }
  }
  return map;
}

int query_most_of_a_kind(string * hand){
  int i, * nums, high_num;
  mapping map;
  map = how_many_of_a_kind(hand);
  nums = values(map);
  high_num = nums[0];
  for(i=1;i<sizeof(nums);i++){
    if(nums[i]>high_num){
      high_num = nums[i];
    }
  }
  return high_num;
}

int query_second_most_of_a_kind(string * hand){
  int i, * nums, high_num, second_num;
  mapping map;
  map = how_many_of_a_kind(hand);
  nums = values(map);
  high_num = 0;
  second_num = 0;
  for(i=0;i<sizeof(nums);i++){
    if(nums[i]>=high_num){
      second_num = high_num;
      high_num = nums[i];
    } else{
      if (nums[i]>second_num){
        second_num = nums[i];
      }
    }
  }
  return second_num;
}

int check_flush(string * hand){
  int i;
  string suit;
  suit = query_card_suit(hand[0]);
  for (i=1;i<5;i++){
    if (query_card_suit(hand[i]) != suit){
      return -1;
    }
  }
  return 1;
}

int query_card_value(string card){
   string val, suit;
   sscanf(card, "%s of %s", val, suit);
   switch(val){
   case "Rogue":
     return 14;
   case "Two":
     return 2;
   case "Three":
     return 3;
   case "Four":
     return 4;
   case "Five":
     return 5;
   case "Six":
     return 6;
   case "Seven":
     return 7;
   case "Eight":
     return 8;
   case "Nine":
     return 9;
   case "Ten":
     return 10;
   case "Hunter":
     return 11;
   case "Lady":
     return 12;
   case "Lord":
     return 13;
   }
}

string query_card_suit(string card){
  string suit, value;
  sscanf(card, "%s of %s", value, suit);
  return suit;
}

void collect_cards(){
  int i, j;
  object player, card, * inv;
  if (sizeof(players)<1||!objectp(ETO)){
    return;
  }
  force_me("emote collects in the cards from all the players");
  for(i=0;i<sizeof(players);i++){
    player = players[i];
    if (!objectp(player)||!present(player, ETO)){
      continue;
    }
    inv = all_inventory(player);
    for (j=0;j<sizeof(inv);j++){
      card = inv[j];
      if (card->id("card") && (string)card->get_deck_id() == deck_id){
        card->remove();
      }
    }
  }  
}
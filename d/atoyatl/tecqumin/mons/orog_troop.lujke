//Coded by Lujke
#include <std.h>
#include <daemons.h>
#include <move.h>

#include "../tecqumin.h"
inherit MONSTER;
#define WEAPONS ({"/d/common/obj/weapon/lucern_hammer",\
                  "/d/common/obj/weapon/flail", "/d/common/obj/weapon/spear_lg",\
                  "/d/common/obj/weapon/battle_axe","/d/common/obj/weapon/large_battle_axe",\
                  "/d/common/obj/weapon/warhammer","/d/common/obj/weapon/bastard",\
                  "/d/common/obj/weapon/shortsword"})
#define ARROWDEATH ({ " an orog takes an arrow in the eye and dies",\
                      " an orog catches an arrow in the throat and dies", " an orog falls, under a hail of arrows",\
                      " an orog gets impaled by an arrow from above",\
                      " an orog looks shocked as an arrow ends its life",\
                      " an orog dies swiftly from an arrow in the groin",\
                      " an orog takes an arrow in the thigh and falls, arterial blood pumping from its leg",\
                      " an orog somersaults backwards, gurgling horribly as an arrow takes it in the throat" })

int crashed, clinging;
string entry_method;

string give_name();

void create()
{
      object ob;
      int i;
      ::create();
      crashed = 0;
  	set_name((:TO, give_name() :));
  	set_id(({"orog", "humanoid", "orog warrior", "troop", "orog troop"}));
  	set_short( (:TO, "short_desc" :) );
      switch (random(2)){
  	case 0:
        set_gender("male");
        break;
      case 1:
        set_gender("female");
      }
      set_long((: TO, "long_desc" :) );
  	set_race("orog");
  	set_body_type("humanoid");
  	set_hd(35,12);
  	set_size(3);
  	set("aggressive",25);
	set_class("fighter");
	set_mlevel("fighter",27);
	set_level(27);
	set_guild_level("fighter",27);
	set_class("thief");
	set_mlevel("thief",27);
	set_guild_level("thief",27);
      set_thief_skill("climb walls", 95);
   	set_max_hp((random(30)+200)*20);
   	set_hp(query_max_hp());
   	set_exp(11000);
	set_max_level(27);
	set_property("swarm",1);
  	set_overall_ac(-22);
  	set_alignment(4);
      set_property("full attacks",1);
      entry_method = "teleported magically right to the granary. WOW, that's magic!";
      set_funcs(({"swarm_em"}));
      set_func_chance(100);
      clinging = 0;
}

init(){
  ::init();
  if (objectp(ETO) && present("tabaxi", ETO)){
    force_me ("kill tabaxi");
  }
}

int query_clinging(){
  return clinging;
}

string give_name(){
  
}

int count_orogs(){
  int num;
  num = 1 + (query_hp()*20)/query_max_hp();
  return num;
}

string short_desc(){
  string desc;
  if (count_orogs()){
    desc = "A massive orog warrior";
  } else {
    desc = "troop of " + count_orogs() + " orog warriors";
  }
  return desc;
}

string long_desc(){
  string desc;
  if (count_orogs() ==1){
    desc =       "A massive orog warrior. It has the facial features of an orc; a jutting"
                +" forehead and tusk-like %^RESET%^canine teeth%^GREEN%^, with pointed, wolflike ears"
                +" and a broad snout for a nose. It's eyes glow dully %^RED%^red%^GREEN%^ in the dark."
                +"\n%^GREEN%^Unlike an orc, however, this creature stands nearly 6 and a half feet"
                +" tall and has an olympian build, with powerful limbs, broad chest and back and a"
                +" narrow waist. It looks fit, lithe and dangerous.";
  }
  desc = "A troop of " + count_orogs() + " orog warriors. They have facial features of orcs;"
                +" jutting foreheads and tusk-like %^RESET%^canine teeth%^GREEN%^, with pointed, "
                +"wolflike ears and broad snouts for a noses. Their eyes glow dully %^RED%^red%^GREEN%^"
                +" in the dark."
                +"\n%^GREEN%^Unlike orcs, however, these creatures stand nearly 6 and a half feet"
                +" tall and haven olympian build, with powerful limbs, broad chests and backs and"
                +" narrow waists. They look fit, lithe and dangerous.";
  return desc;  
}

void set_clinging(int cling){
  clinging = cling;
}

void cling(object ob){
  object clinger;
  if (!objectp(ETO) || !present(ob, ETO)){
    return;
  }
  clinger = new(TABAXOBJ + "clinging_orog");
  clinger->set_orog(TO);
  clinger->cling(ob);
}

void swarm_em(object targ){
  object * critters, * orogs, critter;
  int i;
  if (!objectp(ETO) || clinging == 1){
    return;
  }
  critters = all_living(ETO);
  if (sizeof(critters)<1){
    return;
  }
  orogs = ({});
  for (i=0;i<sizeof(critters);i++){
    critter = critters[i];
    if (objectp(critter) && (string)critter->query_race()=="orog"){
      if ((int)critter->query_clinging() == 0){
        orogs += ({critter});
      }
    }
  }
  if (sizeof(orogs)> 3){
    if(!"/daemon/saving_throw_d.c"->reflex_save(targ,-20)){
      cling(targ);
    } else {
      tell_object(targ, "%^BOLD%^%^YELLOW%^You skip nimbly aside as an orog tries to "
                       +"grab hold of you");
      tell_room(ETO, "%^BOLD%^%^YELLOW%^" + targ->QCN + " skips nimbly aside as an orog"
                   +" tries to grab " + targ->QO, targ);
    }
  }
}

int move(mixed dest){
  // this should stop these mobs being cleaned up by the cleanup daemon
  int result;
  object room;
  result = ::move(dest);
  if (result == MOVE_OK) {
    room = ETO;
    if (room->query_had_players()<1){
      room->set_had_players(2);
    }
  }
  return result;
}

int do_damage(string limb, int damage){
  int result, num_alive, num_deaths;
  num_deaths = 1 + (query_hp()*20)/query_max_hp();
  result = ::do_damage(limb, damage);
  num_alive = 1 + (query_hp()*20)/query_max_hp();
  num_deaths = num_deaths - num_alive;
  if (objectp(ETO)){
    switch(num_deaths){
    case 0:
      break;
    case 1: 
      tell_room(ETO, "%^BOLD%^%^RED%^An orog falls in battle!", TO);
      break;
    default:
      tell_room(ETO, "%^BOLD%^%^RED%^" + num_deaths + " orogs fall in battle!", TO);
    }
  }
  return result;
}


void set_entry_method(string str){
  entry_method = str;
}

string query_entry_method(){
  return entry_method;
}

string * query_walk_path(){
  return path;
}


void set_crashed(int i){
  crashed = 1;
}

void ram_roll(){
  if((string)ETO->query_exit("out")== TABAXROOM + "main_field"){
    force_me("batter gate");
    force_me("approach gate");
    return;
  } 
}


void crash_recover(){
  int i;
  object * critters;
  critters = all_present(ETO);
  if (sizeof(critters)>1){
    for (i=0;i<sizeof(critters);i++){
      if (!critters[i]->ID("orog") || critters[i] == TO){ continue; }
      critters[i]->set_tell_caught(1);
      critters[i]->set_crashed(0);
    }
  }
}

void catch_tell(string str){
  object * squads, * orogs, squad, room;
  int i;
  string where;
  str = FILTERS_D->filter_colors(str);
  if (sizeof(query_attackers())>0){  // to save processor time being used up catching combat spam 
    return; 
  }
  if (interact("out of nowhere hits you!", str)){
    force_me("tell lujke The orog has been hit!");
    if (random(6)>1){
      tell_room(ETO, ARROWDEATH[random(sizeof(ARROWDEATH))]);
      set_hp(query_hp()-(query_max_hp()/20));
    }
  }
  if (interact("The ram rolls in the", str)){
    ram_roll();
    return 1;
  }
  if (interact("Let the battering commence!", str)){
    force_me("batter gate");
  } 
  if (interact("The ram has rolled into a pit!", str)){
    crashed = 1;
    return 1;
  }
  if (interact("You can move again", str)){
    if (crashed == 1){
      crash_recover();
      force_me("shakes " + QP + " head and starts the ram rolling again");
      force_me("approach gate");
      crashed = 0;
      return 1;
    }
  }
  if (interact("You can't find any vines to swing on", str)){
    force_me("emote looks confused as it fails to find any vines to swing on");
    squads = children(MOB + "orog_squad");
    if (sizeof(squads)>0){
      for (i=0;i<sizeof(squads);i++){
        squad = squads[i];
        orogs = squad->query_orogs();
        if(member_array(TO, orogs)!=-1){
          squad->force_me("descend");
          squad->set_tactic(3);
          squad->review_tactics();
          break;
        }
      }
    }
  }
  if (interact("to the jungle floor!", str)){
    force_me("descend");
    set_tactic(3);
    review_tactics();    
  }
  if (interact("appears to be lacking enough people", str)){
    force_me("enter ram");
    force_me("batter gate");
    return 1;
  }
  if (interact("You could raise the ladder here, if you were close enough to the fence", str)){
    force_me("approach fence");
    return 1;
  }
  if (interact("You have reached the fence! You could probably", str)){
    if (present("ladder", TO)){
      force_me("raise ladder");
    } else {
      force_me("climb ladder"); // to try climbing any existing ladders
      force_me("climb fence");
    }
    set_entry_method("scaled a seige ladder to get over the fence and onto the battlements");
    return 1;
  }
  if (interact("You raise the seige ladder against the stockade fence", str)){
    force_me("climb ladder");
    set_entry_method("scaled a seige ladder to get over the fence and onto the battlements");
    return 1;
  }
  if (interact("You manage not to fall off the vine as you arrive!", str)){
    set_entry_method("swung on vines over the fence from the trees to the north to get onto the battlements");
    start_walking(TABAXROOM + "granary");
    return 1;
  }
  if (interact("You clamber over onto the battlements", str)){
    start_walking(TABAXROOM + "granary");
    set_entry_method("scaled a seige ladder to get over the fence and onto the battlements");
    return 1;
  }
  if (interact("and collapses inward!", str)){
    start_walking(TABAXROOM + "granary");
    set_entry_method("battered down the gate with a huge ram to gain entry to the stockade");
    return 1;
  }
}


void reach_destination(){
  object wood, squad, * attackers;
  squad = present("xxsquadxx", ETO);
  if (objectp(squad)){
    if ((int)squad->is_squad_member(TO)==1){
      squad->orog_arrives(TO);
    }
  }
  switch(file_name(ETO)){
    break;
  case TABAXROOM + "granary":
    attackers = query_attackers();
    if (sizeof(attackers)>0){
      call_out("reach_destination", 9);
      return;
    }
    wood = new ("/d/common/obj/misc/wood.c");
    wood->move(ETO);
    force_me("emote quickly starts spreading out wood around the grain stores");
    set_property("posed", "spreading firewood around the grain stores");
    call_out("start_fire", 5);
    break;
  case TABAXROOM + "stockade":
    force_me("pull lever");
    break;
  }
}

void start_fire(){
  object wood, * attackers;
  int i;
  if (file_name(ETO) != TABAXROOM + "granary"){
    start_walking(TABAXROOM + "granary");
    return;
  }
  attackers = query_attackers();
  if (sizeof(attackers)>0){
    i = random(sizeof(attackers));
    force_me("emote tries to get to the firewood to start a fire, but can't get"
            +" past" + attackers[i]->QCN); 
    call_out("start_fire", 3 + random(4));
  }
  if(!present("wood", ETO )&& !present("firewood", ETO)){
    wood = new ("/d/common/obj/misc/wood.c");
    wood->move(TO);
    force_me("drop wood");
  }
  force_me("light fire");
  force_me("tell lujke starting a fire");
  remove_property("posed");
  call_out("go_to_gate", 2);
}

void go_to_gate(){
  string where;
  where = TABAXROOM + "stockade";
  start_walking(where);
}

void heart_beat(){
  object room;
  string where, test;
  ::heart_beat();
  room = ETO;
  if (random(5)>0){
    return;
  }
  if (objectp(room)){
    where = file_name(room);
    test = TABAXROOM + "treetop";
    if (where[0..strlen(test)-1] == test[0..strlen(test)-1]){ //This is to allow the orogs to recognize
      force_me("swing to south");                            // several locations they can swing from
      set_entry_method("swinging on vines over the fence from the trees to the north to get onto the battlements");
    }
  }
}

#include <std.h>
#define DIRECTIONS ({-8,-7,1,9,8,7,-1,-9})


inherit OBJECT;

int * board;

int flip(int col, int pos,int dir);
int place_counter(string colour, string x, int y);
int set_board(int pos, int setting);
string display_board();

void create(){
  int i;
  ::create();
  board = allocate(64);
  for (i=0;i<64;i++){
    board[i] = 0;
  }
  set_id(({"board","game board", "game"}));

  set_name("game board");
  set_short("an interesing looking game board");
  set_long( (: TO, "long_desc" :) );
  set_board(27, -1);
  set_board(28, 1);
  set_board(35, 1);
  set_board(36, -1);
}

int set_board(int pos, int setting){
  if (pos > 59 || pos <0){
    return -1;
  }
  if (setting <-1 ||setting >1){
    return -1;
  }
  board[pos] = setting;
  return 1;
}

string long_desc(){
  string desc;
  desc = "A board made from some sort of hide, divided up into eight rows"
         +" of eight squares\n";
  desc += display_board();
  return desc;
}

string display_board(){
  int i, j, k, x;
  string display;
  display = "%^B_RED%^---+---+---+---+---+---+---+---+---¬\n";
  display += "%^B_RED%^   | A | B | C | D | E | F | G | H |\n";
  display += "%^B_RED%^   |   |   |   |   |   |   |   |   |\n";
  for (i=0;i<8;i++){
    display += "%^B_RED%^---+---+---+---+---+---+---+---+---+\n";
    for (x=0;x<2;x++){
      if (x==0) display += "%^B_RED%^   ";
      if (x==1) display += "%^B_RED%^ " + (i+1) + " ";
      for (j=0;j<32;j++){
        switch (j%4){
        case 0:
          display += "%^B_RED%^|";
          continue;
        case 1..3:
          k = (i*8) + (j/4);
          switch (board[k]){
          case -1:
            display += "%^B_BLACK%^ ";
            continue;
          case 0:
            display += "%^B_RED%^ ";
            continue;
          case 1:
            display += "%^B_WHITE%^ ";
            continue;
          }
        }
      }
      display += "|\n";
    }
  }
  display += "%^B_RED%^---+---+---+---+---+---+---+---+---+\n";
  return display;
}

int flip(int col,int pos,int dir){
  object lujke;
  int * flip_pos, i, j, curr_pos, flipping, result, final_result;
  final_result = -1;
  lujke = find_player("lujke");
//  for (i=0;i<8;i++){
    result = 0;
    curr_pos = pos;
    flipping = 0;  
    flip_pos = ({});
    for (j=0;j<7;j++){
      curr_pos += dir;
      tell_object(lujke, "Checking square" + curr_pos + "\n");
      if (curr_pos<1 || curr_pos >59){
        break;
      }
      if (flipping == 0 && board[curr_pos] == col){
        tell_object(lujke, "No flip available in direction " + dir + "\n");
        continue;
      }
      if (board[curr_pos]==0){
        tell_object(lujke, "No counter at location " + curr_pos + "\n");
        break;
      }
      if (flipping == 1 && board[curr_pos] == col){
        tell_object(lujke, "Flip available in direction " + dir + "\n");
        result = 1;
        continue;
      }
      if (board[curr_pos] == col *-1){
        flipping = 1;
        tell_object(lujke, "Flip ? available in direction " + dir + "\n");
        flip_pos += ({ curr_pos });
        continue;
      }
    }
    if (sizeof(flip_pos)>0 && result == 1){
      for (j=0;j<sizeof(flip_pos);j++){
        curr_pos = flip_pos[j];
        board[curr_pos] = col;
      }
      final_result = 1;
    }
//  }
  return final_result;
}

int place_counter(string colour, string x, int y){
  object lujke;
  int pos, col, i, j, dir, result;
  lujke = find_player("lujke");
  result = -1;
  y--;
  pos = y*8;
  switch (x){
  case "A":
    pos += 0;
    break;
  case "B":
    pos += 1;
    break;
  case "C":
    pos += 2;
    break;
  case "D":
    pos += 3;
    break;
  case "E":
    pos += 4;
    break;
  case "F":
    pos += 5;
    break;
  case "G":
    pos += 6;
    break;
  case "H":
    pos += 7;
    break;
  default:
    return -1;
  }
  if (board[pos]!=0){
    return -2;
  }
  switch(colour){
  case "black":
    col = -1;
    break;
  case "white":
    col = 1;
    break;
  }
  for (i=0;i<8;i++){
    dir = DIRECTIONS[i];
    tell_object (lujke, "checking direction " + dir + "\n");
    if (flip(col,pos,dir)>0){
      tell_object(lujke, "Yes, that works!\n");
      result = 1;
      board[pos]=col;
    }
  }
  return result;
}
//added id of "cavemon" to mobs and check for present("cavemon") before letting
//reset add more to control excess pop. over several resets 
//also added check for userp on init so wandering mobs won't trigger reset
// *Styx* 5/4/02

#include "/d/dagger/cave2/short.h"
#define BASE "/d/dagger/cave2/"

inherit ROOM;

int floor;
int flag;

void do_ogres();
void do_demons();
void first_floor();
void second_floor();
void third_floor();
void set_floor(int x);
int query_floor();
string *get_rooms();

void create() {
    ::create();
   set_terrain(NAT_TUNNEL);
   set_travel(FOOT_PATH);
    if (random(30)) set_property("no teleport", 1);
    remove_property("light");
    set_property("light", random(2)+1);
    set_property("used sticks", 1);

    set_property("indoors", 1);
    set_short("Ogre caverns");
    set_long(
            "You are in a dark damp cavern system descending deep under the mountain.  All around you you see signs of ogre habitation, from fistmarks in the walls to the unmistakable odor.  As you peer into the dark abyss before you you see many glowing eyes peering back at you."
    );
    set_listen("default", "You hear the thunder of hundreds of huge footfalls as they race towards you through the dark.");
    set_smell("default", "You're not sure you want to know what that is.");

    set_items( ([
                "fistmarks" : "   There are several marks gouged into the walls that were most likely made by some very angry ogres.",
                "eyes" : "   The glowing red eyes peer deep into you, deep into your soul, tormenting you with their deep hatred, instilling a great fear in your gut.",
                "walls" : "   These walls are pockmarked and have been brutally abused",
                ]) );

}

void init() {
    if(flag && userp(TP) && !TP->query_true_invis()){
        reset();
        flag = 0;
    }
    ::init();

}

void reset() {
    string *exits, dir;
    ::reset();

   if(!random(3) && !present("cavemon", TO) ){
    
        switch(query_floor()){
        case 0:
            break;
        case 1:
            first_floor();
            break;
        case 2:
            second_floor();
            break;
        case 3:
            third_floor();
            break;
        }
    }

    remove_item("tripwire");
    remove_item("ground");
    if(!pointerp(TO->query_exits()) || !sizeof(TO->query_exits()) ){
      flag = 1;
      return;
    }

    if(!random(40)){
      exits = (string *)TO->query_exits();
      dir = exits[random(sizeof(exits))];
      set_trap_functions( ({dir}), ({"cavein"}), ({dir}) );
      add_item("tripwire", "This tripwire is rigged to cause a cavein!");
      add_item("ground", "There is a tripwire rigged across the ground to the "+dir);
    }
}


void set_floor(int x) {
    floor = x;
}

int query_floor() {
    return floor;
}






// BEGIN MONSTER CREATION CODE
void first_floor() {
    int i;

    if (random(5)) {
        for (i=0;i <= random(3); i++)
            new(MPATH "ogre1.c")->move(TO);
        if (!random(4)) {
            for (i=0;i <= random(2); i++)
                new(MPATH "ogre2.c")->move(TO);
        }
        return;
    } else {
        new(MPATH "demon.c")->move(TO);
        if (!random(10))
            new(MPATH "demon2b.c")->move(TO);
        else if (!random(10))
            new(MPATH "demon.c")->move(TO);
    }
}

void second_floor() {
    int num;

    if (random(3))
        do_ogres();
    else {
        num = random(9);
        switch (num) {
        case 0:
            new(MPATH "G_demon.c")->move(TO);
            if (!random(20)) do_demons();
            break;
        case 1:
            new(MPATH "summoner2.c")->move(TO);
            if (!random(10)) do_demons();
            break;
        case 2:
            new(MPATH "berserker2.c")->move(TO);
            if (!random(15)) do_demons();
            break;
        case 3:
        case 4:
        case 5:
            new(MPATH "demon.c")->move(TO);
            if (!random(10)) do_demons();
            if (!random(10)) do_demons();
            break;
        case 6:
        case 7:
        case 8:
            new(MPATH "demon2b.c")->move(TO);
            if (!random(10)) do_demons();
            if (!random(10)) do_demons();
            break;
        default:
            do_demons();
        }
    }
}

void third_floor() {
    int num;

    if (!random(4))
        do_ogres();
    else {
        num = random(11);
        switch (num) {
        case 0:
            new(MPATH "crone.c")->move(TO);
            if (!random(20)) new(MPATH "summoner.c")->move(TO);
            break;
        case 1:
        case 2:
            new(MPATH "summoner")->move(TO);
            if (!random(10)) do_demons();
            break;
        case 3:
        case 4:
            new(MPATH "berserker.c")->move(TO);
            if (!random(15))
                new(MPATH "berserker.c")->move(TO);
            else if (!random(10))
                do_demons();
            break;
        case 5:
        case 6:
            new(MPATH "G_demon")->move(TO);
            if (!random(10)) do_demons();
            if (!random(15)) do_demons();
            break;
        case 7:
        case 8:
        case 9:
        case 10:
            do_demons();
            do_demons();
            if (!random(15)) do_demons();
            if (!random(15)) new(MPATH "G_demon.c")->move(TO);
            break;
        default:
            do_demons();
        }
    }
}

void do_ogres() {
    //Moves a random 'troop' of ogres into the room.
    int j;
    object mon;
    object *party;

    party = ({ });

    if (!random(10)){
        mon = new(MPATH "ogre6.c");
        mon->set_moving(0);
        party += ({mon});

    }

    if (!random(8)) {
        for (j=0;j<(1+random(3));j++){        
            mon = new(MPATH "ogre5.c");
            mon->set_moving(0);
            party += ({mon});            
        }
    }

    if (!random(6)) {
        for (j=0;j<(1+random(4));j++){        
            mon = new(MPATH "ogre4.c");
            mon->set_moving(0);
            party += ({mon});            
        }
    }

    if (!random(4)) {
        for (j=0;j<(1+random(6));j++){
            mon = new(MPATH "ogre3.c");
            mon->set_moving(0);
            party += ({mon});
        }
    }

    if (!random(3)) {
        for (j=0;j<(1+random(7));j++){        
            mon = new(MPATH "ogre2.c");
            mon->set_moving(0);
            party += ({mon});
        }
    }

    for (j=0;j<(1+random(8));j++){    
        mon = new(MPATH "ogre1.c");
        mon->set_moving(0);
        party += ({mon});
    }

    
    for(j=0;j<sizeof(party);j++){
        if(!objectp(party[j])) continue;
        if(party[j] != party[0])
            party[0]->add_follower(party[j]);
        party[j]->move(TO);
    }

    party[0]->set_speed(60);

    return;
}

int do_demons() {
    int j, k;

    j = random(10);
    switch (j) {
    case 9:
    case 8:
        new(MPATH "G_demon.c")->move(TO);
    case 7..4:
        for (k = 0; k <= random(2); k++)
            new(MPATH "demon.c")->move(TO);
        break;
    case 3..0:
        for (k = 0; k <= random(2); k++)
            new(MPATH "demon2b.c")->move(TO);
        break;
    }
}
// END MONSTER CREATION CODE


//BEGIN MISC CODE
string *get_rooms() {
    string *rooms, *rooms2;
    int i;

    rooms = get_dir(BASE);
    rooms2 = ({});

    for (i=0;i<sizeof(rooms);i++) {
        rooms2 += ({BASE + rooms[i]});
    }
    rooms2 -= NOTROOMS;

    return rooms2;
}


int crack_fcn(string str){
    string place;
    string *rooms;
    int j;

    if(str != "crack"){
        return notify_fail("enter what?\n");
    }

    tell_object(TP, "%^BOLD%^%^BLUE%^You walk slowly into the glowing crack.\n");
    tell_object(TP, "%^BOLD%^%^BLUE%^As you walk deeper into the crack you can feel the light bathing you in its glow as it gets brighter and brighter.\n");
    tell_object(TP, "%^BOLD%^%^BLUE%^You are unable to stop, you keep moving forward as the intensity of the light grows.  You are soon blind, but you continue moving on.\n");
    tell_object(TP, "%^BOLD%^%^BLUE%^Suddenly there is a great flash and the light disapears, leaving you in a different place.\n");
    tell_room(environment(TP), "%^BOLD%^%^BLUE%^"+TP->query_cap_name()+" walks into the strange crack, the blue light bathing "+TP->query_objective()+" in its strange light.");

    if(random(3)){    
        rooms = get_rooms();
        place = rooms[random(sizeof(rooms))];
      TP->move_player(place);
    } else {
        TP->move_player("/d/dagger/cave2/cave2.c");
    }

    return 1;
}
//END MISC CODE




//BEGIN TRAP CODE
int cavein(){
    string verb, exit;
    object *followers;
    int i;

    verb = query_verb();
    followers = TP->query_followers();
    if(!followers) followers = ({});
    
    tell_object(TP, "As you move "+verb+" your foot catches on a wire, and you trip forward as the room starts to collapse down around you!");
    TP->do_damage("torso", roll_dice(5,10));
    if(followers != ({})){
        tell_object(TP, "Some of your companions try to dive through after you!");
    }
    for(i = 0;i<sizeof(followers);i++){
     if(!objectp(followers[i])) continue;
        if(followers[i]->query_stats("dexterity") > random(30)) continue;
        followers -= ({followers[i]});
    }
    
    exit = query_exit(verb);

    for(i = 0;i<sizeof(followers);i++){
      if(!objectp(followers[i])) continue;
        tell_object(followers[i], "As "+TPQCN+" moves "+verb+", you quickly dive after "+TP->query_objective()+", the ceiling collapsing down on top of you!");
        followers[i]->do_damage("torso", roll_dice(5,10));
        followers[i]->move_player(exit);
    }
    TP->move_player(exit);
    tell_room(TO, "You cover your eyes as the ceiling comes crashing down around you!", ({TP})+followers);
    
    collapse_exit(verb, 400);

    return 1;
}



//END TRAP CODE

//boatroom.c

#include <std.h>
#define EOB environment(boat)
#define VALID_DIRECTIONS ({"west","east","north","south","dock","out"})

inherit ROOM;
object boat;
string owner;
//int y,x;
string room;

void init() {
   ::init();
   add_action("steer","steer");
   add_action("location","location");
   add_action("read","read");
   add_action("scan","scan");
   add_action("lower","lower");
}

void create() {
   ::create();
   set_name("boatroom");
   set_short("The inside of a small transport");
   set_long(
@OLI
        %^BOLD%^%^CYAN%^This is a small ship%^RESET%^
        This is the main dock of a small ship that people use to traverse
        the waves of the Saakrune Sea. The occasional sea gull screams as
        it flies over head. Water splashes in your face as you attempt to
        travel to your destination. There is a list of instructions here.
OLI
           );
   set_smell("default","The salt fresh air blows into your face.");
   set_listen("default","Your hear waves crashing against the side of the boat.");
   owner = "noone";
}

int read(string str) {
   if(TP->query_unconscious()){
      TP->send_paralyzed_message("info",TP);
      return 1;
   }
   if(!str || (str != "list" && str != "instructions"))
      return 0;

   write(
@OLI
        steer <direction>   ----  Will steer the boat in that direction
        steer dock will enter a dock 
        steer out will leave a dock
        location   -------------  Will give you the location of the boat
        scan    ----------------  Will show you what's around the boat
        lower gangplank --------  Will lower the gangplank at any dock
OLI
        );
   return 1;
}

int location(string str) {
   string file, place,where;
   int x,y;

   if(TP->query_bound() || TP->query_unconscious()){
      TP->send_paralyzed_message("info",TP);
      return 1;
   }
   file = base_name(EOB);
   if(!sscanf(file,"/d/shadow/virtual/sea/%s.dock",place)) {
      if((sscanf(file,"/d/%s/virtual/%d,%d.sea",where,y,x) != 3) &&
         (sscanf(file,"/d/%s/virtual/sea/%d,%d.sea",where,y,x) != 3)) {
         write("Your location is unknown please contact a wiz.");
      } else {
         switch (where) {
         case "shadow": 
            where = "Saakrune Sea";
            break;
         case "dagger":
            where = "Dagger Sea";
            break;
         }
         write("%^BOLD%^You are located at "+x+","+y+" on the "+where+".");
      }
      return 1;
   }
   write("%^BOLD%^You are currently docked at "+capitalize(place)+".");
   return 1;
}

int steer(string str) {
   string *exits;

   if(TP->query_bound() || TP->query_unconscious() || TP->query_tripped()){
      TP->send_paralyzed_message("info",TP);
      return 1;
   }
   if(owner != "noone")
      if((string)TPQN != owner)
         return notify_fail("This boat is owned by "+capitalize(owner)+", the crew will not respond to you.\n");
   if(find_call_out("steering") != -1) return 1;
   str = lower_case(str);
   if(member_array(str, VALID_DIRECTIONS) == -1)
      return notify_fail("You can't sail in that direction!\n");
   if(!objectp(boat)) {
      boat = new("/d/shadow/virtual/sea/obj/boat.c");
      boat->move(room);
      //"/d/shadow/virtual/sea/"+y+","+x+".c");
   }
   exits = EOB->query_exits();
   if(member_array(str, exits) == -1 && str != "out")
      return notify_fail("You can't sail in that direction, no ocean!\n");
   if(str == "out" && !EOB->is_dock())
      return notify_fail("You can't sail in that direction!\n");
   if(EOB->is_dock() && str != "out")
      return notify_fail("You must sail out of the dock first!\n");
   tell_room(TO,"%^BOLD%^%^CYAN%^"+TPQCN+" steers the ship "+str,TP);
   write("%^BOLD%^%^CYAN%^You steer the ship "+str);
   remove_exit("gangplank");
   call_out("steering",2,str);
   return 1;
}

void steering(string str) {
   //string room;
   object roomob;
   string tmp;

   switch(str) {
   case "west":
      //x -= 1;
      room = EOB->query_exit("west");
      tmp = room;
      //room = "/d/shadow/virtual/sea/"+y+","+x+".sea";
      break;
   case "east":
     // x += 1;
     // room = "/d/shadow/virtual/sea/"+y+","+x+".sea";
      room = EOB->query_exit("east");
      tmp = room;
      break;
   case "north":
    //  y -= 1;
    // room = "/d/shadow/virtual/sea/"+y+","+x+".sea";
     room = EOB->query_exit("north");
     tmp = room;
      break;
   case "south":
     // y += 1;
      room = EOB->query_exit("south");
      tmp = room;
      //room = "/d/shadow/virtual/sea/"+y+","+x+".sea";
      break;
   case "dock":
      tmp = EOB->query_exit("dock");
      break;
   case "out":
      tmp = room;
      //room = "/d/shadow/virtual/sea/"+y+","+x+".sea";
   }
   roomob = find_object_or_load(tmp);
   tell_room(EOB,"%^BOLD%^%^CYAN%^A boat sails "+str);
   boat->move(roomob);
   tell_room(TO,"%^BOLD%^The boat sails "+str);
   tell_room(TO,(string)environment(boat)->query_long()+"%^GREEN%^"+environment(boat)->query_smell("default")+"\n%^YELLOW%^"+environment(boat)->query_listen("default")+"\n");
   tell_room(environment(boat),"%^BOLD%^%^YELLOW%^A boat enters the area.");
}

void set_boat(object ob) {
   boat = ob;
}
/*
void set_x(int i) {
   x = i;
}

void set_y(int i) {
   y = i;
}
  */

void set_room(string str){
   room = str;
}
  
object query_boat() {return boat;}

int scan(string str) {
   if(TP->query_bound() || TP->query_unconscious() || TP->query_tripped()){
      TP->send_paralyzed_message("info",TP);
      return 1;
   }
   tell_room(TO,(string)environment(boat)->query_long()+"%^GREEN%^"+environment(boat)->query_smell("default")+"\n%^YELLOW%^"+environment(boat)->query_listen("default")+"\n");
   return 1;
}

int lower(string str) {
   if(TP->query_bound() || TP->query_unconscious() || TP->query_tripped()){
      TP->send_paralyzed_message("info",TP);
      return 1;
   }
   if(!str || str != "gangplank") return notify_fail("Lower what?\n");

   if(EOB->is_dock()) {
      tell_room(TO,"%^BOLD%^The gangplank has been lowered!");
      add_exit(base_name(EOB),"gangplank");
   }
   else
      return notify_fail("You can't do that in the middle of the ocean!\n");
   return 1;
}

void set_owner(string str) {
   owner = str;
}

string query_owner() {return owner;}

void clean_up() {return 1;}

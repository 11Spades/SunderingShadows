#include <std.h>
inherit "std/room";
// changing mix of items loaded due to the save file having so much variety now
// *Styx* 9/6/03, last change was 1/4/02

#undef GARRETT_DEBUG 1

#ifdef GARRETT_DEBUG

#define FENCE_D "/realms/garrett/fence_d.c"
#define STORE_INH_ROOM "/realms/garrett/fence_store_int"
#define MASTER_STORE_ROOM "/realms/garrett/fence_store"

#else // GARRETT_DEBUG

#define FENCE_D "/daemon/fence_d"
#define STORE_INH_ROOM "/std/obj/fence_store_int"
#define MASTER_STORE_ROOM "/std/obj/fence_store"

#endif // GARRETT_DEBUG

int flag;
int save_contents() { return 1;}

void create() {
    ::create();
    set_properties((["light":1, "indoors":1, "no teleport":1]));
    set_properties((["storage room":1, "save contents":1]));
    set("short","A storage room for the general store.");
    set("long", "Supplies and such are stored here.\n");
}

int clean_up(){ return 0;}

void reset() {

   int flag;
   int i;
   int count = 10;   // was 5
   object ob;
   ::reset();
   if(base_name(TO) == STORE_INH_ROOM ) return;
   if(base_name(TO) == MASTER_STORE_ROOM ) return;
// making sure it doesn't fill up too much over longer reboots *Styx* 9/6/03
   if(sizeof(all_inventory(TO)) > 25)   return;
   flag = FENCE_D->restore_item(TO);
    //if (--flag) flag = FENCE_D->restore_item(TO);
  while (--count && --flag) FENCE_D->restore_item(TO);

/*    if(!present("chest"))
        new("/d/common/obj/misc/chest")->move(this_object());
    if(!present("schest"))
        new("/d/common/obj/misc/schest")->move(this_object());
    if(!present("sack"))
        new("/d/common/obj/misc/sack")->move(this_object());
    if(!present("ssack"))
        new("/d/common/obj/misc/ssack")->move(this_object());
*/
    if(!present("rope"))
        new("/d/common/obj/misc/rope")->move(TO);
/*  leave at least one rope loading
    if(!present("rope 2"))
        new("/d/common/obj/misc/rope")->move(TO);
    if(!present("pouch"))
        new("/d/common/obj/misc/pouch")->move(this_object());
    if(!present("spouch"))
        new("/d/common/obj/misc/spouch")->move(this_object());
    if(!present("rope 3"))
        new("/d/common/obj/misc/rope")->move(this_object());
    if(!present("basket"))
        new("/d/common/obj/misc/basket")->move(this_object());
    if(!present("sbasket"))
        new("/d/common/obj/misc/sbasket")->move(this_object());
    if(!present("torch"))
        new("/d/common/obj/misc/torch")->move(this_object());
    if(!present("lantern"))
        new("/d/common/obj/misc/lantern")->move(this_object());
    if(!present("oil"))
        new("/d/common/obj/misc/oil")->move(this_object());
    if(!present("beacon"))
        new("/d/common/obj/misc/beacon")->move(this_object());
*/
    if(!present("bullseye"))
        new("/d/common/obj/misc/bullseye")->move(this_object());
/*    if(!present("flint"))
        new("/d/common/obj/misc/flint")->move(this_object());
    if(!present("lkchest"))
        new("/d/common/obj/misc/lkchest")->move(this_object());
*/
    if(!present("tools"))
        new("d/common/obj/misc/thief_tools.c")->move(this_object());
    if(!present("tools 2"))
        new("d/common/obj/misc/thief_tools.c")->move(this_object());
    i=0;
    while(i<5) {
        i++;
        if(!present("vial "+i)) {

            ob = new ("/d/common/obj/potion/healing");
            ob->set_uses(15 + random(5));
            ob->move(TO);
        }

    }
   count = 3;
}

/****************** No need for this.

int remove() {
  int iter, inv_size;
  object *inventory;
  
  // Stuff we'll no doubt need later.
  
  inv_size=sizeof(inventory=all_inventory(TO));
  tell_room(TO,"inv_size = "+inv_size+"  inventory = "+identify(inventory));
  for (iter=0;iter < inv_size;iter++) {
    if (inventory[iter]->query("fenced item"))
    {
      tell_room(TO,"Saving stuff "+identify(inventory[iter]));
      "/daemon/fence_d"->save_item(inventory[iter]);
    }
  }
  return ::remove();
}
*/

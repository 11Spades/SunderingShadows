#include <std.h>
inherit DAEMON;

void create() { ::create(); }

string *search_paths() { return ({ "/cmds/psion","/cmds/psionics" }); } // temporary

int caster_class() { return 1; }

string *restricted_races() { 
    return ({ "beastman","bugbear","dwarf","elf","gnome","goblin",
        "orc","drow","firbolg","gnoll","half-ogre","ogre","ogre-mage",
        "voadkyn","wemic" });
}

string *restricted_classes() { return ({ "psywarrior","mage","sorcerer","warlock" }); }

int *restricted_alignments() { return ({}); }

string *restricted_gods() { return ({}); }

mapping stat_requirements() {
    return ([ "intelligence" : 9 ]);
}

// strong & weak saving throws. Fort, Ref, Will
int *saving_throws() { return ({ 0,0,1 }); }

string *combat_styles() {
    return ({});
}

string *class_feats(string myspec) 
{  
    return ({ "simple weapon proficiency", 
              "spell focus", });
}

mapping class_featmap(string myspec) {  
    return ([ 1 : ({ "simple weapon proficiency", "spell focus", }), 7 : ({ "toughness" }), 14 : ({ "resistance" }), ]);
}

string *class_skills()
{  
    return ({ "academics","endurance","healing","spellcraft" });
}

int skill_points() { return 4; }

string old_save_type() { return "psion"; }

string new_save_type() { return "psion"; }

void advanced_func(object player) 
{ 
    player->set_guild_level("psion",(int)player->query_class_level("psion"));
    return; 
}

int hit_dice() { return 6; }  // hit dice rolled for hitpoints each level

int default_hitpoints() { return 2; } // hitpoints per level above level 20

string armor_allowed() { return "mage"; }

string weapons_allowed() { return "mage"; }

int max_stance_offensive() { return 1; }

int max_stance_defensive() { return 1; }

int attack_bonus(object player)
{
    int level,bonus;
    level = (int)player->query_class_level("psion");       
//    if(level > 20) { bonus = (level - 20) + 6; }
//    else(bonus = level / 3);
    bonus = level / 2; // boosted to tabletop equiv
    return bonus;
}

int number_of_attacks(object player)
{
    int num;
    if(!objectp(player)) { return 0; }
    num = "/daemon/bonus_d.c"->attack_bonus("psion",player->query_class_level("psion"),player);
    num = num / 7;
    return num;
}

string query_casting_stat(){
   return "intelligence";
}

mapping query_class_spells()
{
    return(([
        1 : ({"detect aura","inertial armor","mind thrust","minor prescience","mylight","skate","sleep","vigor","water breathing","weapon of energy"}),
        2 : ({"alter self","biofeedback","cloud mind","concealing amorpha","genesis","id insinuation","psionic identify","sustenance","swarm of crystals","tongues"}),
        3 : ({"aura alteration","body adjustment","dispel psionics","energy bolt","energy retort","eradicate invisibility","touchsight"}),
        4 : ({"body purification","detect remote viewing","dimension door","fear","inertial barrier","power leech","slip the bonds","telepathy","wall of ectoplasm"}),
        5 : ({"biting cold","catapsi","creation","ectoplasmic swarm","power resistance","remote viewing"}),
        6 : ({"breath of the black dragon","exigency","mind over energy","remote view trap"}),
        7 : ({"evade burst","mind blank","oak body","phase door","prescience","ultrablast"}),
        8 : ({"dispelling buffer","fold space","iron body","reaving dispel","recall death","true metabolism"}),
        9 : ({"microcosm","timeless body"}),
    ]));
}

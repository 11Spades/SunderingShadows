#include <std.h>

inherit DAEMON;

void create() { ::create(); }

string *search_paths() { return ({ "/cmds/cleric" }); } // temporary

int caster_class() { return 1; }

string *restricted_races() 
{ 
    return ({ "beastman","ogre","ogre-mage","voadkyn","wemic" });
}

string *restricted_classes() { return ({  }); }

int *restricted_alignments() { return ({}); }

string *restricted_gods() { return ({}); }

mapping stat_requirements()
{
    return ([ "wisdom" : 9 ]);
}

string *class_feats() 
{  
    return ({ "light armor proficiency", 
              "medium armor proficiency",
              "simple weapon proficiency" });
}

mapping class_featmap() {  
    return ([ 1 : ({ "light armor proficiency", "medium armor proficiency", "simple weapon proficiency", "shield proficiency" }),  ]);
}

string *class_skills()
{  
    return ({ "healing","influence","perception","spellcraft" });
}

int skill_points() { return 4; }

string old_save_type() { return "cleric"; }

string new_save_type() { return "cleric"; }

void advanced_func(object player) 
{ 
    player->set_guild_level("cleric",(int)player->query_class_level("cleric"));    
    return; 
}

int hit_dice() { return 10; }  // hit dice rolled for hitpoints each level

int default_hitpoints() { return 3; } // hitpoints per level above level 20

string armor_allowed() { return "fighter"; }

string weapons_allowed() { return "fighter"; }

int max_stance_offensive() { return 3; }

int max_stance_defensive() { return 6; }

int attack_bonus(object player)
{
    int level,bonus;
    level = (int)player->query_class_level("cleric");       
//    if(level > 20) { bonus = (level - 20) + 12; }
//    else(bonus = to_int(to_float(level) / 1.6));// 12 at level 20
    bonus = (level*3) / 4; // boosted to tabletop equiv
    return bonus;
}

int number_of_attacks(object player)
{
    int num;
    if(!objectp(player)) { return 0; }
    num = "/daemon/bonus_d.c"->attack_bonus("cleric",player->query_class_level("cleric"),player);
    num = num / 7;
    return num;
}

string query_casting_stat(){
   return "wisdom";
}
// on board discussion, added med armor proficiency to streamline game functionality for the class. N, 9/12.
#include <std.h>

inherit DAEMON;

void create() { ::create(); }

string *search_paths() { return ({ "/cmds/bard" }); } // temporary

int caster_class() { return 1; }

string *restricted_races() 
{ 
    return ({ "beastman","bugbear","dwarf","goblin","half-orc","hobgoblin",
        "kobold","orc","drow","firbolg","gnoll","half-drow","half-ogre","ogre","ogre-mage","voadkyn" });
}

string *restricted_classes() { return ({ "cavalier","paladin","antipaladin" }); }

int *restricted_alignments() 
{ 
    return ({ 1, /*LG*/ 3, /*LE*/ 7, /*CG*/ 9  /*CE*/ });
}

string *restricted_gods() { return ({}); }

mapping stat_requirements()
{
    return ([ "dexterity" : 12,"intelligence" : 13,"charisma" : 15 ]);
}

string *combat_styles() {
    return ({});
}

string *class_feats(string myspec) 
{  
    return ({ "simple weapon proficiency", 
            "martial weapon proficiency",
           "light armor proficiency",
           "medium armor proficiency",
              "thick skinned caster",
              "spell focus" });
}

mapping class_featmap(string myspec) {  
    return ([ 1 : ({ "simple weapon proficiency", "martial weapon proficiency", "light armor proficiency", "medium armor proficiency", "thick skinned caster", "spell focus","rally" }), 5 : ({ "indomitable" }), 8 : ({ "anger" }), 11 : ({ "calm" }), 14 : ({ "force of personality" }), 17 : ({ "charm" }), ]);
}

string *class_skills()
{  
// disguise temporarily disabled, please restore the first line when the command is installed. N, 1/14.
//    return ({ "academics","disguise","influence","spellcraft" });
    return ({ "academics","thievery","influence","spellcraft" });
}

int skill_points() { return 6; }

string old_save_type() { return "bard"; }

string new_save_type() { return "bard"; }

void advanced_func(object player) 
{ 
    player->set_guild_level("bard",(int)player->query_class_level("bard"));
    player->set_advanced((int)player->query_advanced() + 1);    
    return; 
}

int hit_dice() { return 8; }  // hit dice rolled for hitpoints each level

int default_hitpoints() { return 3; } // hitpoints per level above level 20

string armor_allowed() { return "bard"; }

string weapons_allowed() { return "bard"; }

int max_stance_offensive() { return 4; }

int max_stance_defensive() { return 4; }

int attack_bonus(object player)
{
    int level,bonus;
    level = (int)player->query_class_level("bard");       
//    if(level > 20) { bonus = (level - 20) + 15; }
//    else bonus = (level*3) / 4;
    bonus = (level*3) / 4; // boosted to tabletop equiv
    return bonus;
}

int number_of_attacks(object player)
{
    int num;
    if(!objectp(player)) { return 0; }
    num = "/daemon/bonus_d.c"->attack_bonus("bard",player->query_class_level("bard"),player);
    num = num / 7;
    return num;
}

string query_casting_stat(){
   return "charisma";
}

mapping query_class_spells()
{
    return(([
        1 : ({"cure light wounds","dancing lights","daze","detect magic","expedious retreat","flare","legend lore","mending","monster summoning 1","resistance","sleep","summon companion","summon swarm","whispering wind" }),
        2 : ({"blindness","cats grace","cure moderate wounds","darkness","eagles splendor","foxs cunning","garble","hold person","invisibility","misdirection","monster summoning 2","sound burst","tongues" }),
        3 : ({"charm monster","clairvoyance","crushing despair","cure serious wounds","daylight","detect invisibility","dispel magic","displacement","fear","glitterdust","good hope","monster summoning 3","phantom steed" }),
        4 : ({"break curse","cure critical wounds","detect scrying","dimension door","freedom of movement","heroism","monster summoning 4","neutralize poison","secure shelter","shout" }),
        5 : ({"cacophonic shield","false vision","forgotten melody","greater dispel magic","healing circle","monster summoning 5","warriors constitution" }),
        6 : ({"animate object","greater shout","heroes feast","listening shadow","monster summoning 6","project image","regeneration" }),
    ]));
}
